# This is a publish build workflow

name: Publish

on:
  push:
    tags:
      - v*
    paths:
      - '**.vmf'

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

env:
  SOURCE_SDK_MODE: "depotdownloader" # The Source SDK depot downloader mode
  DOTNET_SDK_VERSION: '6.0.x' # The .NET SDK version to use
  BZ2_URL: "https://github.com/philr/bzip2-windows/releases/download/v1.0.8.0/bzip2-1.0.8.0-win-x64.zip"
  STEAMCMD_URL: "https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip"
  DEPOTDOWNLOADER_URL: "https://github.com/SteamRE/DepotDownloader/releases/latest/download/depotdownloader-2.4.6.zip"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: 'master'
    
      - name: Read .env File
        id: env_file
        uses: falti/dotenv-action@v0.2.8

      - name: Check VMF Files
        id: check_vmf_existence
        uses: andstor/file-existence-action@v1
        with:
          files: "src/maps/${{ steps.env_file.outputs.map_name }}.vmf"
          allow_failure: true
      
      - name: Cache Tools Folders
        id: cache_tools_folder
        uses: actions/cache@v3
        with:
          path: tools
          key: ${{ secrets.STEAM_USERNAME }}-${{ steps.env_file.outputs.steam_sdk_appid }}

      - name: Install .NET SDK
        id: install_dotnet_dsk
        if: ${{ env.SOURCE_SDK_MODE }} == "depotdownloader"
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Download Tools
        id: download_tools
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            $bzip2_url = ${{ env.BZ2_URL }}
            $steamcmd_url = ${{ env.STEAMCMD_URL }}
            $depotdownloader_url = ${{ env.DEPOTDOWNLOADER_URL }}

            if (!(Test-Path -path "../bzip2.zip"))
            {
                Invoke-WebRequest $bzip2_url -O ../bzip2.zip
                Expand-Archive ../bzip2.zip ../bzip2 -Force
            }

            if ($mode -eq "steamcmd")
            {
                if (!(Test-Path -path "../steamcmd.zip"))
                {
                    Invoke-WebRequest $steamcmd_url -O ../steamcmd.zip
                    Expand-Archive ../steamcmd.zip ../steamcmd -Force
                }
                Invoke-Expression "../steamcmd/steamcmd.exe +force_install_dir ../depots/$steam_app +login $steam_username $steam_password +app_update $steam_app validate +quit"
            }
            if ($mode -eq "depotdownloader")
            {
                if (!(Test-Path -path "../depotdownloader.zip"))
                {
                    Invoke-WebRequest $depotdownloader_url -O ../depotdownloader.zip
                    Expand-Archive ../depotdownloader.zip ../depotdownloader -Force
                }
                dotnet ../depotdownloader/DepotDownloader.dll -username $steam_username -password $steam_password -app $steam_app -dir ../depots/$steam_app
            }

            if ((Test-Path -path "../slammintools.zip"))
            {
                Expand-Archive ../slammintools.zip ../slammintools -Force
            }

      - name: Build
        id: build_map
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            Copy-Item "src/maps/${{ steps.env_file.outputs.map_name }}.vmf" -Destination "src/maps/${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.vmf"

            $path = Resolve-Path "src/maps"
            $file = "${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.vmf"
            $gamedir = Resolve-Path "tools/depots/${{ steps.env_file.outputs.steam_sdk_appid }}/${{ steps.env_file.outputs.game_name }}"
            $bin_path = "tools/depots/${{ steps.env_file.outputs.steam_sdk_appid }}/bin"
            $bsp_exe = Resolve-Path "$bin_path/vbsp.exe"
            $vis_exe = Resolve-Path "$bin_path/vvis.exe"
            $light_exe = Resolve-Path "$bin_path/vrad.exe"
            $bzip2_exe = Resolve-Path "tools/bzip2/bzip2.exe"
            $bsp_file = "${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp"

            Invoke-Expression "$bsp_exe -game ""$gamedir"" ""$path/$file"""
            Invoke-Expression "$vis_exe -fast -nosort -game ""$gamedir"" ""$path/$file"""
            Invoke-Expression "$light_exe -fast -bounce 2 -game ""$gamedir"" ""$path/$file"""
            Invoke-Expression "$bzip2_exe ""$path/$bsp_file"""

      - name: Upload Artifact (Result)
        id: upload_artifact_bz2
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp.bz2
          path: src/maps/${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp.bz2
          if-no-files-found: error

      - name: Upload Artifact (Trace)
        id: upload_artifact_trace
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.zip
          path: |
            src/maps/*.prt
            src/maps/*.log

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: false
          prerelease: false
          bodyFile: CHANGELOG.md
          artifacts: "src/maps/${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp.bz2"

      # - name: Discord Notification
      #   id: discord_notification
      #   uses: appleboy/discord-action@master
      #   with:
      #     webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
      #     webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
      #     color: "#48f442"
      #     username: "GitHub Bot"
      #     args: 'The map [${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}] has been deployed.'