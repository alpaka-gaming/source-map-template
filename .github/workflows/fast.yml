# This is a fast build workflow

name: Fast

on:
  push:
    tags:
      - 'a*'
  workflow_dispatch:

env:
  SOURCE_SDK_MODE: "depotdownloader" # The Source SDK depot downloader mode
  DOTNET_SDK_VERSION: '6.0.x' # The .NET SDK version to use
  BZ2_URL: "https://github.com/philr/bzip2-windows/releases/download/v1.0.8.0/bzip2-1.0.8.0-win-x64.zip"
  STEAMCMD_URL: "https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip"
  DEPOTDOWNLOADER_URL: "https://github.com/SteamRE/DepotDownloader/releases/download/DepotDownloader_2.4.7/depotdownloader-2.4.7.zip"

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: 'develop'
      - name: Read .env File
        id: env_file
        uses: falti/dotenv-action@v0.2.8
      - name: Check VMF Files
        id: check_vmf_existence
        uses: andstor/file-existence-action@v1
        with:
          files: "src/maps/${{ steps.env_file.outputs.map_name }}.vmf"
          allow_failure: true
      - name: Cache Tools Folders
        id: cache_tools_folder
        uses: actions/cache@v3
        with:
          path: tools
          key: ${{ steps.env_file.outputs.game_name }}-${{ steps.env_file.outputs.steam_sdk_appid }}
      - name: Install .NET SDK
        id: install_dotnet_dsk
        if: ${{ env.SOURCE_SDK_MODE }} == "depotdownloader"
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - name: Download Tools
        id: download_tools
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            cd tools/scripts
            $mode = "${{ env.SOURCE_SDK_MODE }}"
            $steam_sdk_appid = "${{ steps.env_file.outputs.steam_sdk_appid }}"
            $steam_username = "${{ secrets.STEAM_USERNAME }}"
            $steam_password = "${{ secrets.STEAM_PASSWORD }}"
            
            $bzip2_url = "${{ env.BZ2_URL }}"
            $steamcmd_url = "${{ env.STEAMCMD_URL }}"
            $depotdownloader_url = "${{ env.DEPOTDOWNLOADER_URL }}"
            
            if (!(Test-Path -path "../bzip2.zip"))
            {
                Invoke-WebRequest $bzip2_url -O ../bzip2.zip
                Expand-Archive ../bzip2.zip ../bzip2 -Force
            }
            
            if ($mode -eq "steamcmd")
            {
                if (!(Test-Path -path "../steamcmd.zip"))
                {
                    Invoke-WebRequest $steamcmd_url -O ../steamcmd.zip
                    Expand-Archive ../steamcmd.zip ../steamcmd -Force
                }
                Invoke-Expression "../steamcmd/steamcmd.exe +force_install_dir ../depots/$steam_sdk_appid +login $steam_username $steam_password +app_update $steam_sdk_appid validate +quit"
            }
            if ($mode -eq "depotdownloader")
            {
                if (!(Test-Path -path "../depotdownloader.zip"))
                {
                    Invoke-WebRequest $depotdownloader_url -O ../depotdownloader.zip
                    Expand-Archive ../depotdownloader.zip ../depotdownloader -Force
                }
                dotnet ../depotdownloader/DepotDownloader.dll -username $steam_username -password $steam_password -app $steam_sdk_appid -dir ../depots/$steam_sdk_appid
            }
            
            if ((Test-Path -path "../slammintools.zip"))
            {
                Expand-Archive ../slammintools.zip ../slammintools -Force
            }
      - name: Build Map
        id: build_map
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            cd tools/scripts
            
            Set-Variable -name "lastTag" -value "${{ github.ref_name }}" -Scope Global
            Set-Variable -name "steam_sdk_appid" -value "${{ steps.env_file.outputs.steam_sdk_appid }}" -Scope Global
            Set-Variable -name "map" -value "${{ steps.env_file.outputs.map_name }}" -Scope Global
            Set-Variable -name "game_name" -value "${{ steps.env_file.outputs.game_name }}" -Scope Global
            
            $vmf = "${map}.vmf"
            $map_name = "${map}_${lastTag}"
            $vmf_file = "${map_name}.vmf"
            $bsp_file = "${map_name}.bsp"
            
            $toolsdir = Resolve-Path ".."
            $mapdir = Resolve-Path "../../src/maps"
            $depotdir = Resolve-Path "../depots"
            $bindir = Resolve-Path "${depotdir}/${steam_sdk_appid}/bin"
            $gamedir = Resolve-Path "${depotdir}/${steam_sdk_appid}/${game_name}"
            $sourcetest = Resolve-Path "${depotdir}/${steam_sdk_appid}/sourcetest"
            
            Copy-Item "${mapdir}/${vmf}" "${mapdir}/${vmf_file}" -Force
            
            if ($steam_sdk_appid -eq "243750") #HL2MP
            {
                Copy-Item -Path "${toolsdir}/slammintools/mp/*" -Destination "${bindir}" -Force -Recurse
            }
            
            $bsp_exe = Resolve-Path "${bindir}/vbsp.exe"
            $vis_exe = Resolve-Path "${bindir}/vvis.exe"
            $light_exe = Resolve-Path "${bindir}/vrad.exe"
            $bspzip_exe = Resolve-Path "${bindir}/bspzip.exe"
            $vpk_exe = Resolve-Path "${bindir}/vpk.exe"
            
            $cubemaps_exe = Resolve-Path "${bindir}/../hl2.exe"
            $bzip2_exe = Resolve-Path "${toolsdir}/bzip2/bzip2.exe"
            
            # Global Variables
            
            Set-Variable -name "vmf" -value $vmf -Scope Global
            Set-Variable -name "map_name" -value $map_name -Scope Global
            Set-Variable -name "vmf_file" -value $vmf_file -Scope Global
            Set-Variable -name "bsp_file" -value $bsp_file -Scope Global
            
            Set-Variable -name "mapdir" -value $mapdir -Scope Global
            Set-Variable -name "depotdir" -value $depotdir -Scope Global
            Set-Variable -name "toolsdir" -value $toolsdir -Scope Global
            Set-Variable -name "bindir" -value $bindir -Scope Global
            Set-Variable -name "gamedir" -value $gamedir -Scope Global
            Set-Variable -name "sourcetest" -value $sourcetest -Scope Global
            
            Set-Variable -name "bsp_exe" -value $bsp_exe -Scope Global
            Set-Variable -name "vis_exe" -value $vis_exe -Scope Global
            Set-Variable -name "light_exe" -value $light_exe -Scope Global
            Set-Variable -name "bspzip_exe" -value $bspzip_exe -Scope Global
            Set-Variable -name "vpk_exe" -value $vpk_exe -Scope Global
            
            Set-Variable -name "cubemaps_exe" -value $cubemaps_exe -Scope Global
            Set-Variable -name "bzip2_exe" -value $bzip2_exe -Scope Global

            # Build
            
            Invoke-Expression "${bsp_exe} -game '${gamedir}' '${mapdir}/${map_name}'"
            Invoke-Expression "${vis_exe} -fast -nosort -game '${gamedir}' '${mapdir}/${map_name}'"
            Invoke-Expression "${light_exe} -fast -bounce 2 -game '${gamedir}' '${mapdir}/${map_name}'"
            
            Invoke-Expression "${bzip2_exe} '${mapdir}/${bsp_file}' -f"

      - name: Upload Artifact (Result)
        id: upload_artifact_bz2
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp.bz2
          path: src/maps/${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp.bz2
          if-no-files-found: error
      - name: Upload Artifact (Trace)
        id: upload_artifact_trace
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.zip
          path: |
            src/maps/*.prt
            src/maps/*.log

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: true
          prerelease: true
          bodyFile: CHANGELOG.md
          artifacts: "src/maps/${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}.bsp.bz2"

      # - name: Discord Notification
      #   id: discord_notification
      #   uses: appleboy/discord-action@master
      #   with:
      #     webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
      #     webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
      #     color: "#48f442"
      #     username: "GitHub Bot"
      #     args: 'The map [${{ steps.env_file.outputs.map_name }}_${{ github.ref_name }}] has been deployed.'